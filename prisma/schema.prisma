generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PlanId {
  SUBSCRIPTION_PLAN_FREE_V1
  SUBSCRIPTION_PLAN_PLUS_V1
  SUBSCRIPTION_PLAN_PRO_V1
}

enum Currency {
  USD
  CZK
  EUR
}

// Reference: https://stripe.com/docs/api/subscriptions/object
// Lowercase so that it matches the Stripe API status value directly.
enum SubscriptionStatus {
  incomplete // = initial payment failed. Only metadata and default_source can be updated in this state.
  incomplete_expired // = first invoice wasn't paid within 23 hours. Terminal state, the open invoice is voided and no further invoices will be generated.
  trialing // = subscription is in a trial period, moves to 'active' when the trial period is over.
  active // = first invoice was paid, subscription is in active state.
  past_due // = payment is required but cannot be paid (due to failed payment or awaiting additional user actions).
  canceled // = all payment retry attempts have been exhausted, or invoice was not paid by the due date when collection_method=send_invoice.
  unpaid // = no subsequent invoices will be attempted. Invoices will be created, but then immediately automatically closed.
  // This happens after all payment retry attempts have been exhausted or additional deadline
  // after due date has passed when collection_method=send_invoice.
  paused // = Stripe Billing feature that allows you to pause and resume a subscription. Might not be used.
}

// Reference: https://stripe.com/docs/api/charges/object#charge_object-status
// Reference: https://stripe.com/docs/api/payment_intents/object#payment_intent_object-status
enum PaymentStatus {
  succeeded // The payment succeeded, and the payment is completed.
  pending // The payment is awaiting completion (e.g., waiting for a wire transfer to be received).
  failed // The payment failed (e.g., the card was declined).

  // The following are relevant only for Payment Intents.
  canceled // The payment was canceled by the user or the system before it was completed.
  requires_payment_method // The payment requires a new payment method to be attached and confirmed.
  requires_confirmation // The payment requires confirmation (e.g., additional user action such as authentication).
  requires_action // The payment requires additional action (e.g., 3D Secure authentication).
  processing // The payment is being processed (e.g., for ACH or other bank transfers).
}

// Corresponds to the Stripe API interval value.
enum SubscriptionInterval {
  month
  year
}

enum Mood {
  NEUTRAL
  HAPPY
  SAD
  BLUSHED
}

enum BotVisibility {
  PUBLIC
  LINK
  PRIVATE
}

enum BotSource {
  OFFICIAL
  COMMUNITY
}

enum ChatRole {
  USER
  BOT
}

enum ChatMode {
  ROLEPLAY
  ADVENTURE
  CHAT
}

model AdminEmail {
  email String @id
}

enum Feedback {
  LIKE
  DISLIKE
}

model EarlyAccess {
  email       String  @unique
  name        String
  age         Int?
  hearAboutUs String
  granted     Boolean @default(false)
  ip          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([email])
}

model User {
  // User uid.
  id               String  @id @unique
  // Basic user info - most also gotten from OAuth.
  name             String?
  email            String  @unique
  image            String  @default("https://github-production-user-asset-6210df.s3.amazonaws.com/57546404/280538836-8c16b1b3-391f-4cdf-889c-e2e279f3167b.png")
  username         String  @unique
  stripeCustomerId String? @unique
  // Not making this an enum yet, because models will be changed a lot.
  preferredModelId String?

  bio         String?
  botContext  String?
  addressedAs String?
  Quota       PlanQuotaUsage?
  planId      PlanId?

  Bot              Bot[]
  BotLikes         BotLike[]
  BotDislikes      BotDislike[]
  BotShares        BotShares[]
  RRAvailableUsers RRChatQueue[]
  Assets           Asset[]
  BotChats         Chat[]
  ForumPosts       ForumPost[]
  ForumPostLikes   ForumPostLike[]
  Subscription     Subscription[]

  createdAt       DateTime          @default(now())
  StripeSession   StripeSession[]
  GeneralFeedback GeneralFeedback[]

  friendships         Friendship[] @relation("UserFriendships")
  friendshipsOfFriend Friendship[] @relation("FriendFriendships")
}

// This only stores the information about an user's current plan.
model Subscription {
  id                   String               @id @default(cuid())
  userId               String
  planId               PlanId
  stripeSubscriptionId String               @unique
  status               SubscriptionStatus
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  interval             SubscriptionInterval

  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, status])
}

model Payment {
  id                    Int           @id @default(autoincrement())
  stripeSubscriptionId  String
  stripePaymentIntentId String
  amount                Int // Amount in the smallest currency unit (e.g., cents)
  currency              Currency
  status                PaymentStatus
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  @@index([stripeSubscriptionId])
}

model StripeSession {
  id                   String               @id
  createdAt            DateTime             @default(now())
  planId               PlanId
  userId               String
  interval             SubscriptionInterval
  stripeSubscriptionId String?              @unique
  user                 User                 @relation(fields: [userId], references: [id])
}

model PlanQuotaUsage {
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  messagesSent    Int      @default(0) // Count of sent messages since reset.
  botsCreated     Int      @default(0) // Count of created characters since reset.
  botsAccessedIds String[] @default([]) // Accessed bots since reset (ids). // TODO: Change this to a relation?

  resetDay   DateTime @default(now()) // The day the quota was reset.
  resetMonth DateTime @default(now()) // The month the quota was reset.

  @@id([userId])
  @@index([userId, resetDay, resetMonth])
}

enum CharacterTag {
  MOVIE
  ANIME
  PRACTICAL
  ROMANCE
  FANTASY
  SUPERNATURAL
  FEMALE
  MALE
  HORROR
  HERO
  COMEDY
  NERD
  SHY
  BAD
  GAME_CHARACTER
  HISTORY
  MONSTER
  BOOKS
  OC
}

model Bot {
  // Public info.
  id          String @id @default(cuid())
  title       String
  description String

  // Character info.
  name            String
  persona         String
  nsfw            Boolean       @default(false)
  exampleDialogue String?
  visibility      BotVisibility

  // Character images.
  avatar          String  @default("https://i.pinimg.com/originals/46/0b/19/460b194a8645b175bb4fb00de96d6b15.jpg")
  backgroundImage String  @default("https://i.pinimg.com/originals/60/cb/46/60cb4600ad2427938722b77faba6426a.png")
  characterImage  String?

  // Creator.
  creatorId String?
  creator   User?     @relation(fields: [creatorId], references: [id])
  source    BotSource

  // Likes | Dislikes | Shares.
  botLikes    BotLike[]
  botDislikes BotDislike[]
  BotShares   BotShares[]

  // Other relations.
  tags           CharacterTag[]
  BotChats       Chat[]
  InitialMessage InitialMessage[]

  // Mood.
  MoodTable         MoodTable?
  moodImagesEnabled Boolean    @default(false)
  sadImageId        String?
  blushedImageId    String?
  neutralImageId    String?
  happyImageId      String?

  viewCount Int @default(0)
  likes     Int @default(0)
  dislikes  Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Contains mapping of moods to their respective images.
model MoodTable {
  id String @id @default(cuid())

  angry     String?
  happy     String?
  sad       String?
  confident String?
  confused  String?
  shy       String?
  excited   String?
  scared    String?

  botId String @unique
  bot   Bot    @relation(fields: [botId], references: [id])
}

model BotLike {
  id        String   @id @default(cuid())
  botId     String
  userId    String
  bot       Bot      @relation(fields: [botId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@index([botId])
}

model BotDislike {
  id        String   @id @default(cuid())
  botId     String
  userId    String
  bot       Bot      @relation(fields: [botId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@index([botId])
}

model BotShares {
  id        String   @id @default(cuid())
  botId     String
  userId    String
  bot       Bot      @relation(fields: [botId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@index([botId])
}

model Chat {
  id          String    @id @default(cuid())
  mode        ChatMode
  userContext String?
  botId       String
  userId      String
  bot         Bot       @relation(fields: [botId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  messages    Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([botId, mode])
}

model Message {
  id                      Int                       @id @default(autoincrement())
  chatId                  String
  chat                    Chat                      @relation(fields: [chatId], references: [id])
  content                 String
  mood                    Mood                      @default(NEUTRAL)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  role                    ChatRole
  remembered              Boolean                   @default(false)
  MessageFeedbackMetadata MessageFeedbackMetadata[]
  feedback                Feedback?

  @@index([chatId])
}

model InitialMessage {
  chatMode  ChatMode
  message   String
  botId     String
  bot       Bot      @relation(fields: [botId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([botId, chatMode])
}

model Category {
  name       String      @id @unique
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  ForumPosts ForumPost[]

  @@index([name])
}

model RRChatQueue {
  userId    String   @id
  channel   String?
  topic     String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Asset {
  id        String   @id @unique
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorId])
}

//<editor-fold desc="Forum">
model ForumPost {
  id           String          @id @default(cuid())
  bannerImage  String?
  categoryname String?
  category     Category?       @relation(fields: [categoryname], references: [name])
  title        String?
  content      String
  author       User            @relation(fields: [authorId], references: [id])
  authorId     String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  likeCount    BigInt          @default(0)
  viewCount    BigInt          @default(0)
  likes        ForumPostLike[]
  comments     ForumPost[]     @relation("CommentToPost")
  parentPost   ForumPost?      @relation("CommentToPost", fields: [parentPostId], references: [id])
  parentPostId String?
}

model ForumPostLike {
  id        String    @id @default(cuid())
  postId    String
  userId    String
  post      ForumPost @relation(fields: [postId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())

  @@index([postId])
}

model MessageFeedbackMetadata {
  messageId         Int      @id
  message           Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  previousMessageId Int?
  modelId           String
  feedback          Feedback

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([messageId])
}

model GeneralFeedback {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  content   String
  createdAt DateTime @default(now())
}

model IpInfo {
  ip       String  @id
  country  String
  region   String?
  city     String?
  loc      String?
  timezone String?
}

model ContactForm {
  id        String   @id @default(cuid())
  email     String
  phone     String?
  name      String?
  message   String
  createdAt DateTime @default(now())
}

model Friendship {
  id        String   @id @default(cuid())
  userId    String
  friendId  String
  user      User     @relation("UserFriendships", fields: [userId], references: [id])
  friend    User     @relation("FriendFriendships", fields: [friendId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, friendId])
}
